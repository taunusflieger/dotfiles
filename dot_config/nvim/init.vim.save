"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " => Plugins
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  set omnifunc=ale#completion#OmniFunc
  let g:ale_completion_enabled = 1
  let g:ale_completion_autoimport = 1
  let g:ale_sign_column_always = 1
  let g:ale_fix_on_save = 1
  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = ''
  let g:ale_linters = {'rust': ['analyzer']}
  let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'rust': ['rustfmt'],
  \}
  inoremap <silent><expr> <Tab>
        \ pumvisible() ? "\<C-n>" : "\<TAB>"

  let g:user_emmet_leader_key='<C-/>'


 let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified', 'search_status'] ]
      \ ,
      \   'right': [ [ 'lineinfo' ],
      \              ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ 'component_expand': {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_infos': 'lightline#ale#infos',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'component_type': {
      \     'linter_checking': 'right',
      \     'linter_infos': 'right',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'right',
      \ }
  \ }


  let g:lightline.colorscheme = 'selenized_black'

  let g:lightline#ale#indicator_checking = "\uf110"
  let g:lightline#ale#indicator_infos = "\uf129"
  let g:lightline#ale#indicator_warnings = "\uf071"
  let g:lightline#ale#indicator_errors = "\uf05e"
  let g:lightline#ale#indicator_ok = "\uf00c"
"  let g:lightline.separator = {
"      \   'left': '', 'right': ''
"  \}
"  let g:lightline.subseparator = {
"      \   'left': '', 'right': ''
"  \}
  function! LightlineFilename()
    return expand('%:t') !=# '' ? @% : '[No Name]'
  endfunction

  let g:fzf_layout = { 'down': '~10%' }



if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    let need_to_install_plugins = 1
endif



call plug#begin('~/.vim/plugged')
" Sensuble defaults
"  Plug 'tpope/vim-sensible'
"  Plug 'neovim/nvim-lsp'
"  Plug 'neovim/nvim-lspconfig'
"  Plug 'nvim-lua/completion-nvim'

  " Rust support
  "Plug 'neoclide/coc.nvim', {'branch': 'release'}
  "lug 'rust-lang/rust.vim'
  Plug 'cespare/vim-toml'
  Plug 'dense-analysis/ale'
  Plug 'maximbaz/lightline-ale'

   " Git
  Plug 'airblade/vim-gitgutter'                                           " Show git diff in number column
  Plug 'jreybert/vimagit'                                                 " Modal git editing with <leader>g
  Plug 'tpope/vim-fugitive'                                               " Git plugin with commands 'G<command>'
  Plug 'github/copilot.vim'

  " Python
  Plug 'ambv/black'                                                       " Python code formatter
  Plug 'tweekmonster/django-plus.vim'                                     " Better django specific support
  Plug 'vim-python/python-syntax'                                         " Better syntax highlighting for python
  Plug 'vimjas/vim-python-pep8-indent'                                    " More PEP8 compliant python indentation
  Plug 'jpalardy/vim-slime', {'for': 'python'}

  " Navigation
  Plug 'psliwka/vim-smoothie'                                             " Smooth scroll animation instead of jump
  Plug 'farmergreg/vim-lastplace'                                         " Move cursor to last edit location when reopening
  "Plug 'terryma/vim-smooth-scroll'
  " File browser with git indicators
  "Plug 'preservim/nerdtree'
  "Plug 'vim-scripts/The-NERD-tree'
  "Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'ryanoasis/vim-devicons'
  "Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
  "Plug 'jistr/vim-nerdtree-tabs'

  " Status bar
  Plug 'itchyny/lightline.vim'

  " Theme
  Plug 'morhetz/gruvbox'

  " Behavior tools
  Plug 'tpope/vim-sensible'                                               " Sensible vim defaults

  " Fuzzy finder
  Plug 'junegunn/fzf'

  " Tabs
  Plug 'ap/vim-buftabline'

  " Telescope file finder / picker
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

  " neovim language things
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'neovim/nvim-lspconfig'

  " Nicer LSP UI
  Plug 'glepnir/lspsaga.nvim'

  " Git Integration
  Plug 'airblade/vim-gitgutter'

call plug#end()

lua require('lspconfig').tsserver.setup{}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
set background=dark
colorscheme gruvbox
set encoding=utf8
set ffs=unix,dos,mac
highlight Normal ctermbg=none
highlight NonText ctermbg=none



let mapleader = " "

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Navigation
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:smoothie_enabled = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Gitgutter setting
" Use fontawesome icons as signs
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'
" Jump between hunks
nmap <Leader>gn <Plug>(GitGutterNextHunk)  " git next
nmap <Leader>gp <Plug>(GitGutterPrevHunk)  " git previous
" Hunk-add and hunk-revert for chunk staging
nmap <Leader>ga <Plug>(GitGutterStageHunk)  " git add (chunk)
nmap <Leader>gu <Plug>(GitGutterUndoHunk)   " git undo (chunk)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Telescope using Lua functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>fd <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>ft <cmd>lua require('telescope.builtin').git_files()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

lua << EOF
require('telescope').setup{
    defaults = {
        prompt_prefix = "$ "
    }
}
require('telescope').load_extension('fzf')

EOF

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set lbr
set tw=500
set ai
set si
set wrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Visual
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Start scrolling when 7 lines from bottom of screen
set scrolloff=7

" Do not need to show -- Insert --, as lightline handles it already
set noshowmode

" Relative line numbering
set number
"set relativenumber

" Do not show command in bottom bar
set noshowcmd

" Highlight current line
set cursorline

" Hide fold numbering in left column
set foldcolumn=0

" Do not wrap text at the end of the screen
set nowrap

" Disable line numbering in terminal buffer
au TermOpen * setlocal nonumber norelativenumber

" Show live substitution results when using :s
set inccommand=nosplit

" Hide cursorline in inactive window
augroup CrossHair
  au!
  au VimEnter * setlocal cursorline
  au WinEnter * setlocal cursorline
  au BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup end

" Show directory hierarchy in netrw
let g:netrw_liststyle = 3

" Remove directory banner in netrw
let g:netrw_banner = 0

" Prevent duplicate netrw buffers (bug caused by vinegar)
" See: https://codeyarns.com/2015/02/02/cannot-close-buffer-of-netrw-in-vim/
autocmd FileType netrw setl bufhidden=wipe

" Automatically place help buffer in vertical split layout
au BufEnter */doc/* if &filetype=='help' | wincmd L | endif



filetype plugin indent on
syntax on

" gfiles shortcut
nnoremap <C-f> <cmd>Telescope find_files<cr>
nnoremap <C-g> <cmd>Telescope git_files<cr>

" always show the status bar
set laststatus=2

" enable 256 colors
set t_Co=256
set t_ut=


" make gitgutter more responsive
set updatetime=250

" sane text files
set fileformat=unix
set encoding=utf8
set fileencoding=utf8

" sane editing
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
" set colorcolumn=80
" set viminfo='25,\"50,n~/.viminfo
set tw=79
set autoindent
set smartindent

" word movement
imap <S-Left> <Esc>bi
nmap <S-Left> b
imap <S-Right> <Esc><Right>wi
nmap <S-Right> w

" indent/unindent with tab/shift-tab
nmap <Tab> >>
imap <S-Tab> <Esc><<i
nmap <S-tab> <<

" General keyboard mappings
" reload vim config
nnoremap <leader>sv :source $MYVIMRC<CR>

" RUST
" For Go To Definition and Find Reference I use F12 and F24.
" For navigation between the errors I use F11 and F23
nmap <silent> <F11> <Plug>(ale_previous_wrap)
nmap <silent> <F23> <Plug>(ale_next_wrap)
nmap <silent> <F10> :ALEGoToDefinition<CR>
nmap <silent> <F20> :ALEFindReferences<CR>

" mouse
set mouse=a
let g:is_mouse_enabled = 1
noremap <silent> <Leader>m :call ToggleMouse()<CR>
function ToggleMouse()
    if g:is_mouse_enabled == 1
        echo "Mouse OFF"
        set mouse=
        let g:is_mouse_enabled = 0
    else
        echo "Mouse ON"
        set mouse=a
        let g:is_mouse_enabled = 1
    endif
endfunction

" color scheme
syntax on
" colorscheme nord

" lightline
set noshowmode

" code folding
"set foldmethod=indent
"set foldlevel=99

" wrap toggle
setlocal nowrap
noremap <silent> <Leader>w :call ToggleWrap()<CR>
function ToggleWrap()
    if &wrap
        echo "Wrap OFF"
        setlocal nowrap
        set virtualedit=all
        silent! nunmap <buffer> <Up>
        silent! nunmap <buffer> <Down>
        silent! nunmap <buffer> <Home>
        silent! nunmap <buffer> <End>
        silent! iunmap <buffer> <Up>
        silent! iunmap <buffer> <Down>
        silent! iunmap <buffer> <Home>
        silent! iunmap <buffer> <End>
    else
        echo "Wrap ON"
        setlocal wrap linebreak nolist
        set virtualedit=
        setlocal display+=lastline
        noremap  <buffer> <silent> <Up>   gk
        noremap  <buffer> <silent> <Down> gj
        noremap  <buffer> <silent> <Home> g<Home>
        noremap  <buffer> <silent> <End>  g<End>
        inoremap <buffer> <silent> <Up>   <C-o>gk
        inoremap <buffer> <silent> <Down> <C-o>gj
        inoremap <buffer> <silent> <Home> <C-o>g<Home>
        inoremap <buffer> <silent> <End>  <C-o>g<End>
    endif
endfunction

" move through split windows
"nmap <leader><Up> :wincmd k<CR>
"nmap <leader><Down> :wincmd j<CR>
"nmap <leader><Left> :wincmd h<CR>
"nmap <leader><Right> :wincmd l<CR>

" move through buffers
nmap <leader><Left> :bp!<CR>
nmap <leader><Right> :bn!<CR>
nmap <leader>x :bd<CR>

" restore place in file from previous session
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" tag list
map <leader>t :TagbarToggle<CR>

" copy, cut and paste
vmap <C-c> "+y
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" disable autoindent when pasting text
" source: https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" file browser
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let NERDTreeMinimalUI = 1
let g:nerdtree_open = 0
map <leader>t :call NERDTreeToggle()<CR>
function NERDTreeToggle()
    NERDTreeTabsToggle
    if g:nerdtree_open == 1
        let g:nerdtree_open = 0
    else
        let g:nerdtree_open = 1
        wincmd p
    endif
endfunction
let NERDTreeShowHidden=1
" NERDTree setting defaults to work around http://github.com/scrooloose/nerdtree/issues/489
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeGlyphReadOnly = "RO"

" run chezmoi apply whenever you save a dotfile #
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path %

" Hightlight on yank
" From https://neovim.io/news/2021/07
au TextYankPost * lua vim.highlight.on_yank {higroup="IncSearch", timeout=150, on_visual=true}

" Set up language servers
lua << EOF
require'lspconfig'.pyright.setup{}
EOF

" Nicer LSP UI
lua << EOF
local saga = require 'lspsaga'
EOF

" Configure language server
" https://github.com/neovim/nvim-lspconfig#keybindings-and-completion
lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { "pyright" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF

" Start NERDTree and leave the cursor in it.
" autocmd VimEnter * NERDTree
